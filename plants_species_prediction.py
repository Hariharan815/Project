# -*- coding: utf-8 -*-
"""Plants species prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-QYohOsF3YodQACI21BWE2dC7IP6WCwY
"""



from google.colab import files
uploaded = files.upload()  # Choose your zip file

!pip install rarfile

import rarfile

rar_path = "/content/prediction.rar"  # Name of the uploaded file
with rarfile.RarFile(rar_path, 'r') as rf:
    rf.extractall("plants prediction")  # This is the dataset location

!pip install tensorflow

# Step 1: Import Required Libraries
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import numpy as np
import os

# Step 2: Define ImageDataGenerator with Augmentation and Validation Split
datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2,  # 20% for validation
    rotation_range=30,
    zoom_range=0.2,
    horizontal_flip=True
)

#Step 3: Load Training Images
train_gen = datagen.flow_from_directory(
    'plants prediction',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training',
    shuffle=True
)

# Step 4: Load Validation Images
val_gen = datagen.flow_from_directory(
    'plants prediction',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation',
    shuffle=False
)

# Step 5: Check Class Labels Mapped from Folder Names
print("Class Indices:", train_gen.class_indices)

# Step 6: Define and Compile the Model
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model

# Load the pre-trained MobileNetV2 model, excluding the top classification layer
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Add a global average pooling layer
x = base_model.output
x = GlobalAveragePooling2D()(x)

# Add a dense layer with 1024 units
x = Dense(1024, activation='relu')(x)

# Add the final classification layer
predictions = Dense(train_gen.num_classes, activation='softmax')(x)

# Create the full model
model = Model(inputs=base_model.input, outputs=predictions)

# Freeze the base model layers so they are not trained initially
for layer in base_model.layers:
    layer.trainable = False

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

# Step 7: Train the model
epochs = 10  # You can adjust the number of epochs
history = model.fit(
    train_gen,
    epochs=epochs,
    validation_data=val_gen
)

# Step 8: Evaluate the model
loss, accuracy = model.evaluate(val_gen)
print(f"Validation Accuracy: {accuracy * 100:.2f}%")

from tensorflow.keras.preprocessing import image
import numpy as np

img = image.load_img('/content/drive/MyDrive/Images/Flower prediction 5.jfif', target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

pred = model.predict(img_array)
class_idx = np.argmax(pred)
class_label = list(train_gen.class_indices.keys())[class_idx]

print("Predicted class:", class_label)